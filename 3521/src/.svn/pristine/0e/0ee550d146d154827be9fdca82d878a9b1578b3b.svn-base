/***************************** Copyright ****************************************
*
* (C) Copyright 2023, Shaanxi Tianji Communication
*  All Rights Reserved
*
* FileName   : bsp_testmode_para_list.c
* Version    : none
* Author     :
* Date       : 2023-12-18
* Description: none
*******************************************************************************/
#include "main.h"
//#include "stdlib.h"
//#include "stdio.h"
//#include "string.h"
//#include "MCU_config.h"
#include "public_define.h"
#include "public_enum.h"
#include "public_struct.h"
#include "bsp_testmode_para_list.h"
#include "bsp_testmode_define.h"
#include "system_config.h"

/*---------------------- 端口定义 --------------------------------------*/


/*---------------------- 宏定义  ---------------------------------------*/
enum
{
    TM_MODE_PUB 	 = 0x00,
    TM_MODE_OMC		 = 0x01,
    TM_MODE_4G_MODEM = 0x10,
    TM_MODE_5G_MODEM = 0x11,
    TM_MODE_BLE 	 = 0x12,
    TM_MODE_FPGA 	 = 0x13,
    TM_MODE_HUB 	 = 0x14,
    TM_MODE_B3 		 = 0x20,
    TM_MODE_B8 		 = 0x21,
    TM_MODE_B39 	 = 0x22,
    TM_MODE_B40 	 = 0x23,
    TM_MODE_B41 	 = 0x24,
} tm_mode_e;

enum
{
    TM_CH_0 = 0,
    TM_CH_1 = 1,
    TM_CH_2 = 2,
    TM_CH_3 = 3
} tm_ch_e;


/*---------------------- 结构体 ----------------------------------------*/
typedef struct
{
    uint8_t total;
    uint8_t id;
    uint8_t sys;
    uint8_t mode;
    uint16_t len;
    uint16_t * dat;
} para_list_t;

/*---------------------- 常量 ------------------------------------------*/


/*---------------------- 全局变量 --------------------------------------*/
//static uint8_t msg_source = 1;	//PDU消息来源, 用于区分是来自PC的消息还是来自omc的消息, 0: omc, 1: pc

#if LOCAL_MODULE_TYPE == _MU
//主机监控ID表 总包数 - 当前包编号 - 通道号 - 模块号 - 监控ID
const uint16_t mu_para_list_public[] =
{
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0009, /*0x000A,*/
    0x000B, 0x000C, 0x000D, 0x000E, 0x000F, 0x0010, 0x0011, 0x0014,
    0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x00CB, 0x00CA
};
#define MU_PARA_LIST_PUBLIC_NUM (sizeof(mu_para_list_public)/sizeof(mu_para_list_public[0])) //参数个数


const uint16_t mu_para_list_omc[] =
{
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A,
    0x000B, 0x000C, 0x000D, 0x000E, 0x000F, 0x0010, 0x0011, 0x0012, 0x0013, /*0x0014,*/
    0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B
};
#define MU_PARA_LIST_OMC_NUM (sizeof(mu_para_list_omc)/sizeof(mu_para_list_omc[0])) //参数个数


const uint16_t mu_para_list_ble[] =
{
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A,
    0x000B, 0x000C, 0x000D, 0x000E
};
#define MU_PARA_LIST_BLE_NUM (sizeof(mu_para_list_ble)/sizeof(mu_para_list_ble[0])) //参数个数


const uint16_t mu_para_list_fpga[] =
{
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A,
    0x000B, 0x000C, 0x000D, 0x000E, 0x000F, 0x0010, 0x0011, 0x0012, 0x0013, 0x0014,
    0x0015, 0x0016, 0x0017
};
#define MU_PARA_LIST_FPGA_NUM (sizeof(mu_para_list_fpga)/sizeof(mu_para_list_fpga[0])) //参数个数


const uint16_t mu_para_lte_modem[] =
{
    0x0001, 0x0002, 0x0003, 0x0005, 0x0006, 0x0007, 0x0008, 0x000C, 0x000D
};
#define MU_PARA_LIST_LTE_MODEM_NUM (sizeof(mu_para_lte_modem)/sizeof(mu_para_lte_modem[0])) //参数个数
	
const uint16_t mu_para_nr_modem[] =
{
    0x0002, 0x0003, 0x0004, 0x0008, 0x0009, 0x000C, 0x000D, 0x000E,
	0x0010, 0x0011, 0x0012, 0x0012, 0x0016, 0x0017, 0x0018, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 
	0x0020, 0x0021, 0x0022, 0x0027, 0x0028, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 
};

#define MU_PARA_LIST_NR_MODEM_NUM (sizeof(mu_para_nr_modem)/sizeof(mu_para_nr_modem[0])) //参数个数


const uint16_t mu_para_list_4g_b3[] =
{
    //频段名称0x0001, 网络制式0x0002, 电源开关0x0003, 射频开关0x0004, 单通设置0x0005, LTE/NR开关0x0006,  FPGA开关设置 - 0x000F
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000F,

    //上行理论增益0x0020, 下行理论增益0x0021, 上行理论输出功率0x0022, 下行理论输出功率0x0023,
    0x0020, 0x0021, 0x0022, 0x0023,

    //上行实际增益0x0024, 下行实际增益0x0025, 上行实际输出功率0x0026, 下行实际输出功率0x0027, 上行实际输入功率0x0028, 下行实际输入功率0x0029
    0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029,

    //上行期望接收功率0x002A,
    0x002A,

    //开环工控使能0x002E, RSRP计算使能0x002F, 隔离度检测使能0x0030, 告警使能0x0031, 温度补偿使能0x0032, 上行静默使能0x0033,
    0x002E, 0x002F, 0x0030, 0x0031, 0x0032, 0x0033,

    //温度偏移量0x0034, 上行增益调整偏移量0x0035, 下行增益调整偏移量0x0036, 上行输出功率调整偏移量0x0037, 下行输出功率调整偏移量0x0038, 同步耦合增益差值0x0039,
    0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039,

    //上行静默门限0x003A, 开环工控启控点0x003B, 上行开环工控门限0x003C, 上行开环工控增益联动差值0x003D, 上行开环工控功率联动差值0x003E
    0x003A, 0x003B, 0x003C, 0x003D, 0x003E,

    //上行ADC1读取0x003F, 下行ADC1读取0x0041, 上行输出功率1 0x0043, 下行输出功率1 0x0045
    0x003F, 0x0041, 0x0043, 0x0045,

    //下行8668后ADC采样值读取0x0060, 下行8668后功率值读取0x0062
    0x0060, 0x0062,

    //上行LNA1 ATT值0x0047, 下行LNA1 ATT值0x0049, 下行LNA2 ATT值0x004A, 上行LNA1状态设置0x004B, 下行LNA1状态设置0x004D, 下行LNA2状态设置0x004E,
    0x0047, 0x0049, 0x004A, 0x004B, 0x004D, 0x004E,

    //上行功放开关设置10x004F, 下行功放开关设置10x0051,
    0x004F, 0x0051,

    //下行数字衰减器1设置0x0055
    0x0055,

    //上行模拟衰减1设置0x0057, 上行模拟衰减2设置0x0058, 下行模拟衰减1设置0x0059,
    0x0057, 0x0058, 0x0059,

    //上行模拟衰减1(PWM)0x005B, 上行模拟衰减2(PWM)0x005C, 下行模拟衰减1(PWM)0x005D,
    0x005B, 0x005C, 0x005D,

//    //告警使能: 上行入过功率0x005F, 下行入过功率0x0060, 上行入欠功率0x0061, 下行入欠功率0x0062, 上行出过功率0x0063, 下行出过功率0x0064,
//    0x005F, 0x0060, 0x0061, 0x0062, 0x0063, 0x0064,

//    //告警使能: 上行出欠功率0x0065, 下行出欠功率0x0066, 上行自激0x0067, 下行自激0x0068, 过温度0x0069, 其他告警0x006A,
//    0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A,

//    //告警门限: 上行入过功率0x006B, 下行入过功率0x006C, 上行入欠功率0x006D, 下行入欠功率0x006E, 上行出过功率0x006F, 下行出过功率0x0070,
//    0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 0x0070,

//    //上行出欠功率0x0071, 下行出欠功率0x0072, 上行自激0x0073, 下行自激0x0074, 过温度0x0075, 其他0x0076,
//    0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076,

//    //告警: 上行入过功率0x0077, 下行入过功率0x0078, 上行入欠功率0x0079, 下行入欠功率0x007A, 上行出过功率0x007B, 下行出过功率0x007C,
//    0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C,

//    //上行出欠功率0x007D, 下行出欠功率0x007E, 上行自激0x007F, 下行自激0x0080, 过温度0x0081, 其他0x0082,
//    0x007D, 0x007E, 0x007F, 0x0080, 0x0081, 0x0082,

    //校准参数 - 功率表类: 上行输出功率表10x00E0, 上行输出功率表20x00E1, 下行输出功率表(8668)0x00E2, 
	//校准参数 - 功率表类: 下行输出功率表10x00E3, 下行输出功率表20x00E4, 下行输出功率表(8668)0x00E5, 
    0x00E0, 0x00E3, 0x00E5,

    //校准参数 - 衰减表类: 上行模拟衰减表1 0x00E6, 上行模拟衰减表2 0x00E7, 下行模拟衰减表1 0x00E8, 下行模拟衰减表2 0x00E9, 
    0x00E6, 0x00E7, 0x00E8,

    //校准参数 - 温补表类: 上行温补表0x00EA, 下行温补表0x00EB, 同步耦合测量 0x00EC
    0x00EC,

    //8668参数
    //866x软件复位0x0101, 866x初始化0x0102, 寄存器地址0x0103, 866x页内寄存器读写0x0104, 866x页外寄存器读写0x0105, 866xTX频率设置0x0106,
    0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106,

    //866xRX频率设置0x0107, 866xTX增益偏移量设置0x0108, 866xRX增益偏移量设置0x0109, 866x链路设置0x010A, 866x初始增益值设置0x010B, 866x带宽设置0x010C,
    0x0107, 0x0108, 0x0109, 0x010A, 0x010B, 0x010C,

    //866x回环状态设置0x010D, 866x单通状态设置0x010E, 866x读取RSSI0x010F, 增益段选择0x0110, 镜像校准0x0111, TX本振I(21C)0x0112, TX本振Q(21C)0x0113
    0x010D, 0x010E, 0x010F, 0x0110, 0x0111, 0x0112, 0x0113,

    //RX本振I(21C)0x0114, RX本振Q(21C)0x0115, 正常模式本振I0x0116, 正常模式本振Q0x0117, 阻塞模式本振I0x0118, 阻塞模式本振Q0x0119,
    0x0114, 0x0115, 0x0116, 0x0117, 0x0118, 0x0119, 0x011A, 0x011B, 0x011C, 0x011D, 0x011E, 

    //校准参数 - 8668类: 增益表设置, 抗阻塞增益表设置, 8668初始增益,
    0x01C8, 0x01C9, 0x01CA, 0x01CC, 0x01CD,

    //8668测试使用, 正式使用可删除
    0x0180, 0x0181, 0x0182, 0x0183, 0x0184, 0x0185, 0x0186, 0x0187, 0x0188, 0x0189, 0x018A, 0x018B, 0x018C, 0x018D, 0x018E, 0x018F,
    0x0190, 0x0191, 0x0192, 0x0193, 0x0194, 0x0195, 0x0196, 0x0197, 0x0198, 0x0199, 0x019A, 0x019B, 0x019C, 0x019D, 0x019E,
};
#define MU_PARA_LIST_4G_B3_NUM (sizeof(mu_para_list_4g_b3)/sizeof(mu_para_list_4g_b3[0])) //参数个数

const uint16_t mu_para_list_4g_b8[] =
{
    //频段名称0x0001, 网络制式0x0002, 电源开关0x0003, 射频开关0x0004, 单通设置0x0005, 组别0x0006,  FPGA开关设置 - 0x000F
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0009, 0x000A,  0x000B, 0x000C, 0x000D, 0x000F,

    //上行理论增益0x0020, 下行理论增益0x0021, 上行理论输出功率0x0022, 下行理论输出功率0x0023,
    0x0020, 0x0021, 0x0022, 0x0023,

    //上行实际增益0x0024, 下行实际增益0x0025, 上行实际输出功率0x0026, 下行实际输出功率0x0027, 上行实际输入功率0x0028, 下行实际输入功率0x0029
    0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029,

    //上行期望接收功率0x002A,
    0x002A,

    //开环工控使能0x002E, RSRP计算使能0x002F, 隔离度检测使能0x0030, 告警使能0x0031, 温度补偿使能0x0032, 上行静默使能0x0033,
    0x002E, 0x002F, 0x0030, 0x0031, 0x0032, 0x0033,

    //温度偏移量0x0034, 上行增益调整偏移量0x0035, 下行增益调整偏移量0x0036, 上行输出功率调整偏移量0x0037, 下行输出功率调整偏移量0x0038, 同步耦合增益差值0x0039,
    0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039,

    //上行静默门限0x003A, 开环工控启控点0x003B, 上行开环工控门限0x003C, 上行开环工控增益联动差值0x003D, 上行开环工控功率联动差值0x003E
    0x003A, 0x003B, 0x003C, 0x003D, 0x003E,

    //上行ADC1读取0x003F, 下行ADC1读取0x0041, 上行输出功率1 0x0043, 下行输出功率1 0x0045
    0x003F, 0x0041, 0x0043, 0x0045,

    //下行8668后ADC采样值读取0x0060, 下行8668后功率值读取0x0062
    0x0060, 0x0062,

    //上行LNA1 ATT值0x0047, 下行LNA1 ATT值0x0049, 下行LNA2 ATT值0x004A, 上行LNA1状态设置0x004B, 下行LNA1状态设置0x004D
    0x0047, 0x0049, 0x004A, 0x004B, 0x004D,

    //上行功放开关设置10x004F, 下行功放开关设置10x0051,
    0x004F, 0x0051,

    //下行数字衰减器1设置0x0055
    0x0055,

    //上行模拟衰减1设置0x0057, 上行模拟衰减2设置0x0058, 下行模拟衰减1设置0x0059,
    0x0057, 0x0058, 0x0059,

    //上行模拟衰减1(PWM)0x005B, 上行模拟衰减2(PWM)0x005C, 下行模拟衰减1(PWM)0x005D,
    0x005B, 0x005C, 0x005D,

//    //告警使能: 上行入过功率0x005F, 下行入过功率0x0060, 上行入欠功率0x0061, 下行入欠功率0x0062, 上行出过功率0x0063, 下行出过功率0x0064,
//    0x005F, 0x0060, 0x0061, 0x0062, 0x0063, 0x0064,

//    //告警使能: 上行出欠功率0x0065, 下行出欠功率0x0066, 上行自激0x0067, 下行自激0x0068, 过温度0x0069, 其他告警0x006A,
//    0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A,

//    //告警门限: 上行入过功率0x006B, 下行入过功率0x006C, 上行入欠功率0x006D, 下行入欠功率0x006E, 上行出过功率0x006F, 下行出过功率0x0070,
//    0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 0x0070,

//    //上行出欠功率0x0071, 下行出欠功率0x0072, 上行自激0x0073, 下行自激0x0074, 过温度0x0075, 其他0x0076,
//    0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076,

//    //告警: 上行入过功率0x0077, 下行入过功率0x0078, 上行入欠功率0x0079, 下行入欠功率0x007A, 上行出过功率0x007B, 下行出过功率0x007C,
//    0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C,

//    //上行出欠功率0x007D, 下行出欠功率0x007E, 上行自激0x007F, 下行自激0x0080, 过温度0x0081, 其他0x0082,
//    0x007D, 0x007E, 0x007F, 0x0080, 0x0081, 0x0082,

    //校准参数 - 功率表类: 上行输出功率表10x00E0, 上行输出功率表20x00E1, 下行输出功率表(8668)0x00E2, 
	//校准参数 - 功率表类: 下行输出功率表10x00E3, 下行输出功率表20x00E4, 下行输出功率表(8668)0x00E5, 
    0x00E0, 0x00E3, 0x00E5,

    //校准参数 - 衰减表类: 上行模拟衰减表1 0x00E6, 上行模拟衰减表2 0x00E7, 下行模拟衰减表1 0x00E8, 下行模拟衰减表2 0x00E9, 
    0x00E6, 0x00E7, 0x00E8,

    //校准参数 - 温补表类: 上行温补表0x00EA, 下行温补表0x00EB, 同步耦合测量 0x00EC
    0x00EC,

    //8668参数
    //866x软件复位0x0101, 866x初始化0x0102, 寄存器地址0x0103, 866x页内寄存器读写0x0104, 866x页外寄存器读写0x0105, 866xTX频率设置0x0106,
    0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106,

    //866xRX频率设置0x0107, 866xTX增益偏移量设置0x0108, 866xRX增益偏移量设置0x0109, 866x链路设置0x010A, 866x初始增益值设置0x010B, 866x带宽设置0x010C,
    0x0107, 0x0108, 0x0109, 0x010A, 0x010B, 0x010C,

    //866x回环状态设置0x010D, 866x单通状态设置0x010E, 866x读取RSSI0x010F, 增益段选择0x0110, 镜像校准0x0111, TX本振I(21C)0x0112, TX本振Q(21C)0x0113
    0x010D, 0x010E, 0x010F, 0x0110, 0x0111, 0x0112, 0x0113,

    //RX本振I(21C)0x0114, RX本振Q(21C)0x0115, 正常模式本振I0x0116, 正常模式本振Q0x0117, 阻塞模式本振I0x0118, 阻塞模式本振Q0x0119,
    0x0114, 0x0115, 0x0116, 0x0117, 0x0118, 0x0119,  0x011A, 0x011B, 0x011C, 0x011D, 0x011E, 

    //校准参数 - 8668类: 增益表设置, 抗阻塞增益表设置, 8668初始增益,
    0x01C8, 0x01C9, 0x01CA, 0x01CC, 0x01CD,

    //8668测试使用, 正式使用可删除
    0x0180, 0x0181, 0x0182, 0x0183, 0x0184, 0x0185, 0x0186, 0x0187, 0x0188, 0x0189, 0x018A, 0x018B, 0x018C, 0x018D, 0x018E, 0x018F,
    0x0190, 0x0191, 0x0192, 0x0193, 0x0194, 0x0195, 0x0196, 0x0197, 0x0198, 0x0199, 0x019A, 0x019B, 0x019C, 0x019D, 0x019E,
};
#define MU_PARA_LIST_4G_B8_NUM (sizeof(mu_para_list_4g_b8)/sizeof(mu_para_list_4g_b8[0])) //参数个数


const uint16_t mu_para_list_4g_b39_b40[] =
{
    //频段名称0x0001, 网络制式0x0002, 电源开关0x0003, 射频开关0x0004, 单通设置0x0005, 组别0x0006, 同步状态0x0007,  FPGA开关设置 - 0x000F
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006,  0x0007, 0x0009, 0x000A,  0x000B, 0x000C, 0x000D, 0x000F,
	
	//LTE子帧配比 - 0x0016, LTE特殊子帧配比 - 0x0017
	0x0016, 0x0017,
	
    //上行理论增益0x0020, 下行理论增益0x0021, 上行理论输出功率0x0022, 下行理论输出功率0x0023,
    0x0020, 0x0021, 0x0022, 0x0023,

    //上行实际增益0x0024, 下行实际增益0x0025, 上行实际输出功率0x0026, 下行实际输出功率0x0027, 上行实际输入功率0x0028, 下行实际输入功率0x0029,
    0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029,

    //上行期望接收功率0x002A,
    0x002A,

    //开环工控使能0x002E, RSRP计算使能0x002F, 隔离度检测使能0x0030, 告警使能0x0031, 温度补偿使能0x0032, 上行静默使能0x0033,
    0x002E, 0x002F, 0x0030, 0x0031, 0x0032, 0x0033,

    //温度偏移量0x0034, 上行增益调整偏移量0x0035, 下行增益调整偏移量0x0036, 上行输出功率调整偏移量0x0037, 下行输出功率调整偏移量0x0038, 同步耦合增益差值0x0039,
    0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039,

    //上行静默门限0x003A, 开环工控启控点0x003B, 上行开环工控门限0x003C, 上行开环工控增益联动差值0x003D, 上行开环工控功率联动差值0x003E
    0x003A, 0x003B, 0x003C, 0x003D, 0x003E,

    //上行ADC1读取0x003F, 下行ADC1读取0x0041, 上行输出功率1 0x0043, 下行输出功率1 0x0045
    0x003F, 0x0041, 0x0043, 0x0045,

    //下行8668后ADC采样值读取0x0060, 下行8668后功率值读取0x0062
    0x0060, 0x0062,

    //上行LNA1 ATT值0x0047, 下行LNA1 ATT值0x0049, 下行LNA2 ATT值0x004A, 上行LNA1状态设置0x004B, 下行LNA1状态设置0x004D, 下行LNA2状态设置0x004E,
    0x0047, 0x0049, 0x004A, 0x004B, 0x004D, 0x004E,

    //上行功放开关设置10x004F, 下行功放开关设置10x0051,
    0x004F, 0x0051,

    //下行数字衰减器1设置0x0055
    0x0055,

    //上行模拟衰减1设置0x0057, 上行模拟衰减2设置0x0058, 下行模拟衰减1设置0x0059,
    0x0057, 0x0058, 0x0059,

    //上行模拟衰减1(PWM)0x005B, 上行模拟衰减2(PWM)0x005C, 下行模拟衰减1(PWM)0x005D,
    0x005B, 0x005C, 0x005D,

//    //告警使能: 上行入过功率0x005F, 下行入过功率0x0060, 上行入欠功率0x0061, 下行入欠功率0x0062, 上行出过功率0x0063, 下行出过功率0x0064,
//    0x005F, 0x0060, 0x0061, 0x0062, 0x0063, 0x0064,

//    //告警使能: 上行出欠功率0x0065, 下行出欠功率0x0066, 上行自激0x0067, 下行自激0x0068, 过温度0x0069, 其他告警0x006A,
//    0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A,

//    //告警门限: 上行入过功率0x006B, 下行入过功率0x006C, 上行入欠功率0x006D, 下行入欠功率0x006E, 上行出过功率0x006F, 下行出过功率0x0070,
//    0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 0x0070,

//    //上行出欠功率0x0071, 下行出欠功率0x0072, 上行自激0x0073, 下行自激0x0074, 过温度0x0075, 其他0x0076,
//    0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076,

//    //告警: 上行入过功率0x0077, 下行入过功率0x0078, 上行入欠功率0x0079, 下行入欠功率0x007A, 上行出过功率0x007B, 下行出过功率0x007C,
//    0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C,

//    //上行出欠功率0x007D, 下行出欠功率0x007E, 上行自激0x007F, 下行自激0x0080, 过温度0x0081, 其他0x0082,
//    0x007D, 0x007E, 0x007F, 0x0080, 0x0081, 0x0082,

    //校准参数 - 功率表类: 上行输出功率表10x00E0, 上行输出功率表20x00E1, 下行输出功率表(8668)0x00E2, 
	//校准参数 - 功率表类: 下行输出功率表10x00E3, 下行输出功率表20x00E4, 下行输出功率表(8668)0x00E5, 
    0x00E0, 0x00E3, 0x00E5,

    //校准参数 - 衰减表类: 上行模拟衰减表1 0x00E6, 上行模拟衰减表2 0x00E7, 下行模拟衰减表1 0x00E8, 下行模拟衰减表2 0x00E9, 
    0x00E6, 0x00E7, 0x00E8,

    //校准参数 - 温补表类: 上行温补表0x00EA, 下行温补表0x00EB, 同步耦合测量 0x00EC
    0x00EC,

    //8668参数
    //866x软件复位0x0101, 866x初始化0x0102, 寄存器地址0x0103, 866x页内寄存器读写0x0104, 866x页外寄存器读写0x0105, 866xTX频率设置0x0106,
    0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106,

    //866xRX频率设置0x0107, 866xTX增益偏移量设置0x0108, 866xRX增益偏移量设置0x0109, 866x链路设置0x010A, 866x初始增益值设置0x010B, 866x带宽设置0x010C,
    0x0107, 0x0108, 0x0109, 0x010A, 0x010B, 0x010C,

    //866x回环状态设置0x010D, 866x单通状态设置0x010E, 866x读取RSSI0x010F, 增益段选择0x0110, 镜像校准0x0111, TX本振I(21C)0x0112, TX本振Q(21C)0x0113
    0x010D, 0x010E, 0x010F, 0x0110, 0x0111, 0x0112, 0x0113,

    //RX本振I(21C)0x0114, RX本振Q(21C)0x0115, 正常模式本振I0x0116, 正常模式本振Q0x0117, 阻塞模式本振I0x0118, 阻塞模式本振Q0x0119,
    0x0114, 0x0115, 0x0116, 0x0117, 0x0118, 0x0119,  0x011A, 0x011B, 0x011C, 0x011D, 0x011E, 

    //校准参数 - 8668类: 增益表设置, 抗阻塞增益表设置, 8668初始增益, 额定增益在正常码表的索引值,额定增益在抗阻塞码表的索引值
    0x01C8, 0x01C9, 0x01CA, 0x01CC, 0x01CD,

    //8668测试使用, 正式使用可删除
    0x0180, 0x0181, 0x0182, 0x0183, 0x0184, 0x0185, 0x0186, 0x0187, 0x0188, 0x0189, 0x018A, 0x018B, 0x018C, 0x018D, 0x018E, 0x018F,
    0x0190, 0x0191, 0x0192, 0x0193, 0x0194, 0x0195, 0x0196, 0x0197, 0x0198, 0x0199, 0x019A, 0x019B, 0x019C, 0x019D, 0x019E,
};
#define MU_PARA_LIST_4G_B39_B40_NUM (sizeof(mu_para_list_4g_b39_b40)/sizeof(mu_para_list_4g_b39_b40[0])) //参数个数

const uint16_t mu_para_list_5g[] =
{
    //频段名称0x0001, 网络制式0x0002, 电源开关0x0003, 射频开关0x0004, 单通设置0x0005, 组别0x0006, 同步状态0x0007,  FPGA开关设置 - 0x000F
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006,  0x0007,  0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000F,

    //5G上下行配比0x0010, 5G特殊子帧配置0x0011, 5G帧头时间调整量0x0012,
//    0x0010, 0x0011, 0x0012,

    //上行理论增益0x0020, 下行理论增益0x0021, 上行理论输出功率0x0022, 下行理论输出功率0x0023,
    0x0020, 0x0021, 0x0022, 0x0023,

    //上行实际增益0x0024, 下行实际增益0x0025, 上行实际输出功率0x0026, 下行实际输出功率0x0027, 上行实际输入功率0x0028, 下行实际输入功率0x0029, 上行期望接收功率0x002A,
    0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A,

    //开环工控使能0x002E, RSRP计算使能0x002F, 隔离度检测使能0x0030, 告警使能0x0031, 温度补偿使能0x0032, 上行静默使能0x0033,
    0x002E, 0x002F, 0x0030, 0x0031, 0x0032, 0x0033,

    //温度偏移量0x0034, 上行增益调整偏移量0x0035, 下行增益调整偏移量0x0036, 上行输出功率调整偏移量0x0037, 下行输出功率调整偏移量0x0038, 同步耦合增益差值0x0039,
    0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039,

    //上行静默门限0x003A, 开环工控启控点0x003B, 上行开环工控门限0x003C, 上行开环工控增益联动差值0x003D, 上行开环工控功率联动差值0x003E
    0x003A, 0x003B, 0x003C, 0x003D, 0x003E,

    //上行ADC1读取0x003F, 下行ADC1读取0x0041, 上行输出功率1 0x0043, 下行输出功率1 0x0045
    0x003F, 0x0041, 0x0043, 0x0045,

    //下行8668后ADC采样值读取0x0060, 下行8668后功率值读取0x0062
    0x0060, 0x0062,

    //上行LNA1 ATT值0x0047, 下行LNA1 ATT值0x0049, 下行LNA2 ATT值0x004A, 上行LNA1状态设置0x004B, 下行LNA1状态设置0x004D, 下行LNA2状态设置0x004E,
    0x0047, 0x0049, 0x004A, 0x004B, 0x004D, 0x004E,

//    //上行功放开关设置10x004F, 上行功放开关设置20x0050, 下行功放开关设置10x0051, 下行功放开关设置20x0052,
//    0x004F, 0x0050, 0x0051, 0x0052,

    //下行数字衰减器1设置0x0055
    0x0055,

    //上行模拟衰减1设置0x0057, 上行模拟衰减2设置0x0058, 下行模拟衰减1设置0x0059,
    0x0057, 0x0058, 0x0059,

    //上行模拟衰减1(PWM)0x005B, 上行模拟衰减2(PWM)0x005C, 下行模拟衰减1(PWM)0x005D,
    0x005B, 0x005C, 0x005D,

//    //告警使能: 上行入过功率0x005F, 下行入过功率0x0060, 上行入欠功率0x0061, 下行入欠功率0x0062, 上行出过功率0x0063, 下行出过功率0x0064,
//    0x005F, 0x0060, 0x0061, 0x0062, 0x0063, 0x0064,

//    //告警使能: 上行出欠功率0x0065, 下行出欠功率0x0066, 上行自激0x0067, 下行自激0x0068, 过温度0x0069, 其他告警0x006A,
//    0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A,

//    //告警门限: 上行入过功率0x006B, 下行入过功率0x006C, 上行入欠功率0x006D, 下行入欠功率0x006E, 上行出过功率0x006F, 下行出过功率0x0070,
//    0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 0x0070,

//    //上行出欠功率0x0071, 下行出欠功率0x0072, 上行自激0x0073, 下行自激0x0074, 过温度0x0075, 其他0x0076,
//    0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076,

//    //告警: 上行入过功率0x0077, 下行入过功率0x0078, 上行入欠功率0x0079, 下行入欠功率0x007A, 上行出过功率0x007B, 下行出过功率0x007C,
//    0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C,

//    //上行出欠功率0x007D, 下行出欠功率0x007E, 上行自激0x007F, 下行自激0x0080, 过温度0x0081, 其他0x0082,
//    0x007D, 0x007E, 0x007F, 0x0080, 0x0081, 0x0082,

    //校准参数 - 功率表类: 上行输出功率表10x00E0, 上行输出功率表20x00E1, 下行输出功率表(8668)0x00E2, 
	//校准参数 - 功率表类: 下行输出功率表10x00E3, 下行输出功率表20x00E4, 下行输出功率表(8668)0x00E5, 
    0x00E0, 0x00E3, 0x00E5,

    //校准参数 - 衰减表类: 上行模拟衰减表1 0x00E6, 上行模拟衰减表2 0x00E7, 下行模拟衰减表1 0x00E8, 下行模拟衰减表2 0x00E9, 
    0x00E6, 0x00E7, 0x00E8,

    //校准参数 - 温补表类: 上行温补表0x00EA, 下行温补表0x00EB, 同步耦合测量 0x00EC

    //8668参数
    //866x软件复位0x0101, 866x初始化0x0102, 寄存器地址0x0103, 866x页内寄存器读写0x0104, 866x页外寄存器读写0x0105, 866xTX频率设置0x0106,
    0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106,

    //866xRX频率设置0x0107, 866xTX增益偏移量设置0x0108, 866xRX增益偏移量设置0x0109, 866x链路设置0x010A, 866x初始增益值设置0x010B, 866x带宽设置0x010C,
    0x0107, 0x0108, 0x0109, 0x010A, 0x010B, 0x010C,

    //866x回环状态设置0x010D, 866x单通状态设置0x010E, 866x读取RSSI0x010F, 增益段选择0x0110, 镜像校准0x0111, TX本振I(21C)0x0112, TX本振Q(21C)0x0113
    0x010D, 0x010E, 0x010F, 0x0110, 0x0111, 0x0112, 0x0113,

    //RX本振I(21C)0x0114, RX本振Q(21C)0x0115, 正常模式本振I0x0116, 正常模式本振Q0x0117, 阻塞模式本振I0x0118, 阻塞模式本振Q0x0119,
    0x0114, 0x0115, 0x0116, 0x0117, 0x0118, 0x0119,  0x011A, 0x011B, 0x011C, 0x011D, 0x011E, 

    //校准参数 - 8668类: 增益表设置, 抗阻塞增益表设置, 8668初始增益,  额定增益在正常码表的索引值,额定增益在抗阻塞码表的索引值
    0x01C8, 0x01C9, 0x01CA, 0x01CC, 0x01CD,

    //8668测试使用, 正式使用可删除
    0x0180, 0x0181, 0x0182, 0x0183, 0x0184, 0x0185, 0x0186, 0x0187, 0x0188, 0x0189, 0x018A, 0x018B, 0x018C, 0x018D, 0x018E, 0x018F,
    0x0190, 0x0191, 0x0192, 0x0193, 0x0194, 0x0195, 0x0196, 0x0197, 0x0198, 0x0199, 0x019A, 0x019B, 0x019C, 0x019D, 0x019E,
};
#define MU_PARA_LIST_5G_NUM (sizeof(mu_para_list_5g)/sizeof(mu_para_list_5g[0])) //参数个数


#define PKG_MAX_NUM	( 12 )
para_list_t t_mu_para_list[ PKG_MAX_NUM ];

#else
//从机监控ID表 总包数 - 当前包编号 - 通道号 - 模块号 - 监控ID
const uint16_t ru_para_list_public[] =
{
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, /*0x000A,*/
    0x000B, 0x000C, 0x000D, /*0x000E, 0x000F, 0x0010,*/ 0x0011, 0x0012, 0x0013, 0x0014,
    0x00C8,
};
#define RU_PARA_LIST_PUBLIC_NUM (sizeof(ru_para_list_public)/sizeof(ru_para_list_public[0])) //参数个数


const uint16_t ru_para_list_omc[] =
{
    0x0001, 0x0002, 0x001B,
};
#define RU_PARA_LIST_OMC_NUM (sizeof(ru_para_list_omc)/sizeof(ru_para_list_omc[0])) //参数个数


const uint16_t ru_para_list_ble[] =
{
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x000B, 0x000C, 
    0x000D, 0x000E
};
#define RU_PARA_LIST_BLE_NUM (sizeof(ru_para_list_ble)/sizeof(ru_para_list_ble[0])) //参数个数


const uint16_t ru_para_list_fpga[] =
{
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A,
    0x000B, 0x000C, 0x000D, 0x000E, 0x000F, 0x0010, 0x0011, 0x0012, 0x0013, 0x0014,
    0x0015, 0x0016, 0x0017
};
#define RU_PARA_LIST_FPGA_NUM (sizeof(ru_para_list_fpga)/sizeof(ru_para_list_fpga[0])) //参数个数

const uint16_t ru_para_list_4g_b3_b8_b39_b40[] =
{
    //频段名称0x0001, 网络制式0x0002, 电源开关0x0003, 射频开关0x0004, 单通设置0x0005, 组别0x0006,  FPGA开关设置 - 0x000F
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x000F,

    //上行理论增益0x0020, 下行理论增益0x0021, 上行理论输出功率0x0022, 下行理论输出功率0x0023,
    0x0020, 0x0021, 0x0022, 0x0023,

    //上行实际增益0x0024, 下行实际增益0x0025, 上行实际输出功率0x0026, 下行实际输出功率0x0027, 上行实际输入功率0x0028, 下行实际输入功率0x0029
    0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029,

    //上行期望接收功率0x002A,
    0x002A,

    //频段0x002B, 带宽0x002C, 频点0x002D
    0x002B, 0x002C, 0x002D,

    //开环工控使能0x002E, RSRP计算使能0x002F, 隔离度检测使能0x0030, 告警使能0x0031, 温度补偿使能0x0032, 上行静默使能0x0033,
    0x002E, 0x002F, 0x0030, 0x0031, 0x0032, 0x0033,

    //温度偏移量0x0034, 上行增益调整偏移量0x0035, 下行增益调整偏移量0x0036, 上行输出功率调整偏移量0x0037, 下行输出功率调整偏移量0x0038, 同步耦合增益差值0x0039,
    0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039,

    //上行静默门限0x003A, 开环工控启控点0x003B, 上行开环工控门限0x003C, 上行开环工控增益联动差值0x003D, 上行开环工控功率联动差值0x003E
    0x003A, 0x003B, 0x003C, 0x003D, 0x003E,

    //上行ADC1读取0x003F, 下行ADC1读取0x0041, 上行输出功率10x0043, 下行输出功率10x0045
    0x003F, 0x0041, 0x0043, 0x0045,

    //上行8668后ADC采样值读取0x005F, 上行8668后功率值读取0x0061
    0x005F, 0x0061,
    
    //上行LNA1 ATT值0x0047, 上行LNA2 ATT值0x0048, 下行LNA1 ATT值0x0049, 上行LNA1状态设置0x004B, 上行LNA2状态设置0x004C, 下行LNA1状态设置0x004D,
    0x0047, 0x0048, 0x0049, 0x004B, 0x004C, 0x004D,

    //上行功放开关设置10x004F, 下行功放开关设置10x0051,
    0x004F, 0x0051,

    //上行数字衰减器1设置0x0053
    0x0053,

    //上行模拟衰减1设置0x0057, 下行模拟衰减1设置0x0059, 下行模拟衰减2设置0x005A,
    0x0057, 0x0059, 0x005A,

    //上行模拟衰减1(PWM)0x005B, 下行模拟衰减1(PWM)0x005D, 下行模拟衰减2(PWM)0x005E,
    0x005B, 0x005D, 0x005E,

//    //告警使能: 上行入过功率0x005F, 下行入过功率0x0060, 上行入欠功率0x0061, 下行入欠功率0x0062, 上行出过功率0x0063, 下行出过功率0x0064,
//    0x005F, 0x0060, 0x0061, 0x0062, 0x0063, 0x0064,

//    //告警使能: 上行出欠功率0x0065, 下行出欠功率0x0066, 上行自激0x0067, 下行自激0x0068, 过温度0x0069, 其他告警0x006A,
//    0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A,

//    //告警门限: 上行入过功率0x006B, 下行入过功率0x006C, 上行入欠功率0x006D, 下行入欠功率0x006E, 上行出过功率0x006F, 下行出过功率0x0070,
//    0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 0x0070,

//    //上行出欠功率0x0071, 下行出欠功率0x0072, 上行自激0x0073, 下行自激0x0074, 过温度0x0075, 其他0x0076,
//    0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076,

//    //告警: 上行入过功率0x0077, 下行入过功率0x0078, 上行入欠功率0x0079, 下行入欠功率0x007A, 上行出过功率0x007B, 下行出过功率0x007C,
//    0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C,

//    //上行出欠功率0x007D, 下行出欠功率0x007E, 上行自激0x007F, 下行自激0x0080, 过温度0x0081, 其他0x0082,
//    0x007D, 0x007E, 0x007F, 0x0080, 0x0081, 0x0082,

    //校准参数 - 功率表类: 上行输出功率表10x00E0, 上行8668输出功率表0x00E2, 下行输出功率表1 0x00E3,
    0x00E0, 0x00E2, 0x00E3,

    //校准参数 - 衰减表类: 上行模拟衰减表10x00E6, 下行模拟衰减表10x00E8, 下行模拟衰减表20x00E9,
    0x00E6, 0x00E8, 0x00E9,

    //校准参数 - 温补表类: 上行温补表0x00EA, 下行温补表0x00EB,
    0x00EA, 0x00EB,

    //8668参数
    //866x软件复位0x0101, 866x初始化0x0102, 寄存器地址0x0103, 866x页内寄存器读写0x0104, 866x页外寄存器读写0x0105, 866xTX频率设置0x0106,
    0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106,

    //866xRX频率设置0x0107, 866xTX增益偏移量设置0x0108, 866xRX增益偏移量设置0x0109, 866x链路设置0x010A, 866x初始增益值设置0x010B, 866x带宽设置0x010C,
    0x0107, 0x0108, 0x0109, 0x010A, 0x010B, 0x010C,

    //866x回环状态设置0x010D, 866x单通状态设置0x010E, 866x读取RSSI0x010F, 增益段选择0x0110, 镜像校准0x0111, TX本振I(21C)0x0112, TX本振Q(21C)0x0113
    0x010D, 0x010E, 0x010F, 0x0110, 0x0111, 0x0112, 0x0113,

    //RX本振I(21C)0x0114, RX本振Q(21C)0x0115, 正常模式本振I0x0116, 正常模式本振Q0x0117, 阻塞模式本振I0x0118, 阻塞模式本振Q0x0119,
    0x0114, 0x0115, 0x0116, 0x0117, 0x0118, 0x0119, 0x011A, 0x011B, 0x011C, 0x011D, 0x011E, 

    //校准参数 - 8668类: 增益表设置, 抗阻塞增益表设置, 8668初始增益,
    0x01C8, 0x01C9, 0x01CA, 0x01CC, 0x01CD,

    //8668测试使用, 正式使用可删除
    0x0180, 0x0181, 0x0182, 0x0183, 0x0184, 0x0185, 0x0186, 0x0187, 0x0188, 0x0189, 0x018A, 0x018B, 0x018C, 0x018D, 0x018E, 0x018F,
    0x0190, 0x0191, 0x0192, 0x0193, 0x0194, 0x0195, 0x0196, 0x0197, 0x0198, 0x0199, 0x019A, 0x019B, 0x019C, 0x019D, 0x019E,
};
#define RU_PARA_LIST_4G_B3_B8_B39_B40_NUM (sizeof(ru_para_list_4g_b3_b8_b39_b40)/sizeof(ru_para_list_4g_b3_b8_b39_b40[0])) //参数个数

const uint16_t ru_para_list_5g[] =
{
    //频段名称0x0001, 网络制式0x0002, 电源开关0x0003, 射频开关0x0004, 单通设置0x0005, 组别0x0006, 同步状态0x0007,  FPGA开关设置 - 0x000F
    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006,  0x0007,  0x000F,

    //5G上下行配比0x0010, 5G特殊子帧配置0x0011, 5G帧头时间调整量0x0012,
    0x0010, 0x0011, 0x0012,

    //上行理论增益0x0020, 下行理论增益0x0021, 上行理论输出功率0x0022, 下行理论输出功率0x0023,
    0x0020, 0x0021, 0x0022, 0x0023,

    //上行实际增益0x0024, 下行实际增益0x0025, 上行实际输出功率0x0026, 下行实际输出功率0x0027, 上行实际输入功率0x0028, 下行实际输入功率0x0029, 上行期望接收功率0x002A,
    0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A,

    //频段0x002B, 带宽0x002C, 频点0x002D
    0x002B, 0x002C, 0x002D,

    //开环工控使能0x002E, RSRP计算使能0x002F, 隔离度检测使能0x0030, 告警使能0x0031, 温度补偿使能0x0032, 上行静默使能0x0033,
    0x002E, 0x002F, 0x0030, 0x0031, 0x0032, 0x0033,

    //温度偏移量0x0034, 上行增益调整偏移量0x0035, 下行增益调整偏移量0x0036, 上行输出功率调整偏移量0x0037, 下行输出功率调整偏移量0x0038, 同步耦合增益差值0x0039,
    0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039,

    //上行静默门限0x003A, 开环工控启控点0x003B, 上行开环工控门限0x003C, 上行开环工控增益联动差值0x003D, 上行开环工控功率联动差值0x003E
    0x003A, 0x003B, 0x003C, 0x003D, 0x003E,

    //上行ADC1读取0x003F, 下行ADC1读取0x0041, 上行输出功率10x0043, 下行输出功率10x0045
    0x003F, 0x0041, 0x0043, 0x0045,

    //上行8668后ADC采样值读取0x005F, 上行8668后功率值读取0x0061
    0x005F, 0x0061,

    //上行LNA1 ATT值0x0047, 上行LNA2 ATT值0x0048, 下行LNA1 ATT值0x0049, 上行LNA1状态设置0x004B, 上行LNA2状态设置0x004C, 下行LNA1状态设置0x004D,
    0x0047, 0x0048, 0x0049, 0x004B, 0x004C, 0x004D,

   //上行功放开关设置10x004F, 下行功放开关设置10x0051,
   0x004F, 0x0051,

    //上行数字衰减器1设置0x0053
    0x0053,

    //上行模拟衰减1设置0x0057, 下行模拟衰减1设置0x0059, 下行模拟衰减2设置0x005A,
    0x0057, 0x0059, 0x005A,

    //上行模拟衰减1(PWM)0x005B, 下行模拟衰减1(PWM)0x005D, 下行模拟衰减2(PWM)0x005E,
    0x005B, 0x005D, 0x005E,

//    //告警使能: 上行入过功率0x005F, 下行入过功率0x0060, 上行入欠功率0x0061, 下行入欠功率0x0062, 上行出过功率0x0063, 下行出过功率0x0064,
//    0x005F, 0x0060, 0x0061, 0x0062, 0x0063, 0x0064,

//    //告警使能: 上行出欠功率0x0065, 下行出欠功率0x0066, 上行自激0x0067, 下行自激0x0068, 过温度0x0069, 其他告警0x006A,
//    0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A,

//    //告警门限: 上行入过功率0x006B, 下行入过功率0x006C, 上行入欠功率0x006D, 下行入欠功率0x006E, 上行出过功率0x006F, 下行出过功率0x0070,
//    0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 0x0070,

//    //上行出欠功率0x0071, 下行出欠功率0x0072, 上行自激0x0073, 下行自激0x0074, 过温度0x0075, 其他0x0076,
//    0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076,

//    //告警: 上行入过功率0x0077, 下行入过功率0x0078, 上行入欠功率0x0079, 下行入欠功率0x007A, 上行出过功率0x007B, 下行出过功率0x007C,
//    0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C,

//    //上行出欠功率0x007D, 下行出欠功率0x007E, 上行自激0x007F, 下行自激0x0080, 过温度0x0081, 其他0x0082,
//    0x007D, 0x007E, 0x007F, 0x0080, 0x0081, 0x0082,

    //校准参数 - 功率表类: 上行输出功率表10x00E0, 上行8668输出功率表0x00E2, 下行输出功率表1 0x00E3,
    0x00E0, 0x00E2, 0x00E3,

    //校准参数 - 衰减表类: 上行模拟衰减表10x00E6, 下行模拟衰减表10x00E8, 下行模拟衰减表20x00E9,
    0x00E6, 0x00E8, 0x00E9,

    //校准参数 - 温补表类: 上行温补表0x00EA, 下行温补表0x00EB,
    0x00EA, 0x00EB,

    //8668参数
    //866x软件复位0x0101, 866x初始化0x0102, 寄存器地址0x0103, 866x页内寄存器读写0x0104, 866x页外寄存器读写0x0105, 866xTX频率设置0x0106,
    0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106,

    //866xRX频率设置0x0107, 866xTX增益偏移量设置0x0108, 866xRX增益偏移量设置0x0109, 866x链路设置0x010A, 866x初始增益值设置0x010B, 866x带宽设置0x010C,
    0x0107, 0x0108, 0x0109, 0x010A, 0x010B, 0x010C,

    //866x回环状态设置0x010D, 866x单通状态设置0x010E, 866x读取RSSI0x010F, 增益段选择0x0110, 镜像校准0x0111, TX本振I(21C)0x0112, TX本振Q(21C)0x0113
    0x010D, 0x010E, 0x010F, 0x0110, 0x0111, 0x0112, 0x0113,

    //RX本振I(21C)0x0114, RX本振Q(21C)0x0115, 正常模式本振I0x0116, 正常模式本振Q0x0117, 阻塞模式本振I0x0118, 阻塞模式本振Q0x0119,
    0x0114, 0x0115, 0x0116, 0x0117, 0x0118, 0x0119,  0x011A, 0x011B, 0x011C, 0x011D, 0x011E, 

    //校准参数 - 8668类: 增益表设置, 抗阻塞增益表设置, 8668初始增益,  额定增益在正常码表的索引值,额定增益在抗阻塞码表的索引值
    0x01C8, 0x01C9, 0x01CA, 0x01CC, 0x01CD,

    //8668测试使用, 正式使用可删除
    0x0180, 0x0181, 0x0182, 0x0183, 0x0184, 0x0185, 0x0186, 0x0187, 0x0188, 0x0189, 0x018A, 0x018B, 0x018C, 0x018D, 0x018E, 0x018F,
    0x0190, 0x0191, 0x0192, 0x0193, 0x0194, 0x0195, 0x0196, 0x0197, 0x0198, 0x0199, 0x019A, 0x019B, 0x019C, 0x019D, 0x019E,
};
#define RU_PARA_LIST_5G_NUM (sizeof(ru_para_list_5g)/sizeof(ru_para_list_5g[0])) //参数个数

#define PKG_MAX_NUM	( 10 )
para_list_t t_ru_para_list[ PKG_MAX_NUM ];

#endif



/*---------------------- 局部变量 --------------------------------------*/



/*---------------------- 声明 ------------------------------------------*/



/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HAL ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/





/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DRV ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/





/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ APP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/*****************************************************************************
* @Name	  : para_list_struct_assign
* @Brief  : 参数列表结构体赋值
* @Param  : tag: 结构体指针
**			 total: 总包数
**			 pkg_id: 当前包编号
**			 sys: 通道号
**			 mode: 模块号
**			 len: 监控参数长度
**			 dat: 监控参数存储首地址
* @Retval :
* @Author :
* @Data   : 2023-12-26
* @Note   :
*****************************************************************************/
void para_list_struct_assign(para_list_t * tag, uint8_t total, uint8_t pkg_id, uint8_t sys, uint8_t mode, uint16_t len, uint16_t * dat)
{
    tag->total = total;
    tag->id    = pkg_id;
    tag->sys   = sys;
    tag->mode  = mode;
    tag->len   = len;
    tag->dat   = dat;
}

/*****************************************************************************
* @Name	  : para_list_init
* @Brief  :
* @Param  : None
* @Retval :
* @Author :
* @Data   : 2023-12-26
* @Note   :
*****************************************************************************/
void para_list_init(void)
{
#if LOCAL_MODULE_TYPE == _MU
    para_list_struct_assign(&t_mu_para_list[0],  PKG_MAX_NUM, 1,  TM_CH_0, TM_MODE_PUB, 		MU_PARA_LIST_PUBLIC_NUM, (uint16_t *)mu_para_list_public);
    para_list_struct_assign(&t_mu_para_list[1],  PKG_MAX_NUM, 2,  TM_CH_0, TM_MODE_OMC, 		MU_PARA_LIST_OMC_NUM, (uint16_t *)mu_para_list_omc);
    para_list_struct_assign(&t_mu_para_list[2],  PKG_MAX_NUM, 3,  TM_CH_0, TM_MODE_4G_MODEM,	MU_PARA_LIST_LTE_MODEM_NUM, (uint16_t *)mu_para_lte_modem);
    para_list_struct_assign(&t_mu_para_list[3],  PKG_MAX_NUM, 4,  TM_CH_0, TM_MODE_5G_MODEM, 	MU_PARA_LIST_NR_MODEM_NUM, (uint16_t *)mu_para_nr_modem);
    para_list_struct_assign(&t_mu_para_list[4],  PKG_MAX_NUM, 5,  TM_CH_0, TM_MODE_BLE, 		MU_PARA_LIST_BLE_NUM, (uint16_t *)mu_para_list_ble);
    para_list_struct_assign(&t_mu_para_list[5],  PKG_MAX_NUM, 6,  TM_CH_0, TM_MODE_FPGA, 		MU_PARA_LIST_FPGA_NUM, (uint16_t *)mu_para_list_fpga);
    para_list_struct_assign(&t_mu_para_list[6],  PKG_MAX_NUM, 7,  TM_CH_1, TM_MODE_B3, 		    MU_PARA_LIST_4G_B3_NUM, (uint16_t *)mu_para_list_4g_b3);
    para_list_struct_assign(&t_mu_para_list[7],  PKG_MAX_NUM, 8,  TM_CH_1, TM_MODE_B8, 		    MU_PARA_LIST_4G_B8_NUM, (uint16_t *)mu_para_list_4g_b8);
    para_list_struct_assign(&t_mu_para_list[8],  PKG_MAX_NUM, 9,  TM_CH_1, TM_MODE_B39, 		MU_PARA_LIST_4G_B39_B40_NUM, (uint16_t *)mu_para_list_4g_b39_b40);
    para_list_struct_assign(&t_mu_para_list[9],  PKG_MAX_NUM, 10, TM_CH_1, TM_MODE_B40, 		MU_PARA_LIST_4G_B39_B40_NUM, (uint16_t *)mu_para_list_4g_b39_b40);
    para_list_struct_assign(&t_mu_para_list[10], PKG_MAX_NUM, 11, TM_CH_2, TM_MODE_B41, 		MU_PARA_LIST_5G_NUM, (uint16_t *)mu_para_list_5g);
    para_list_struct_assign(&t_mu_para_list[11], PKG_MAX_NUM, 12, TM_CH_3, TM_MODE_B41, 		MU_PARA_LIST_5G_NUM, (uint16_t *)mu_para_list_5g);
#else
    para_list_struct_assign(&t_ru_para_list[0],  PKG_MAX_NUM, 1,  TM_CH_0, TM_MODE_PUB, 		RU_PARA_LIST_PUBLIC_NUM, (uint16_t *)ru_para_list_public);
    para_list_struct_assign(&t_ru_para_list[1],  PKG_MAX_NUM, 2,  TM_CH_0, TM_MODE_OMC, 		RU_PARA_LIST_OMC_NUM, (uint16_t *)ru_para_list_omc);
    para_list_struct_assign(&t_ru_para_list[2],  PKG_MAX_NUM, 3,  TM_CH_0, TM_MODE_BLE, 		RU_PARA_LIST_BLE_NUM, (uint16_t *)ru_para_list_ble);
    para_list_struct_assign(&t_ru_para_list[3],  PKG_MAX_NUM, 4,  TM_CH_0, TM_MODE_FPGA, 		RU_PARA_LIST_FPGA_NUM, (uint16_t *)ru_para_list_fpga);
    para_list_struct_assign(&t_ru_para_list[4],  PKG_MAX_NUM, 5,  TM_CH_1, TM_MODE_B3, 		    RU_PARA_LIST_4G_B3_B8_B39_B40_NUM, (uint16_t *)ru_para_list_4g_b3_b8_b39_b40);
    para_list_struct_assign(&t_ru_para_list[5],  PKG_MAX_NUM, 6,  TM_CH_1, TM_MODE_B8, 		    RU_PARA_LIST_4G_B3_B8_B39_B40_NUM, (uint16_t *)ru_para_list_4g_b3_b8_b39_b40);
    para_list_struct_assign(&t_ru_para_list[6],  PKG_MAX_NUM, 7,  TM_CH_1, TM_MODE_B39, 		RU_PARA_LIST_4G_B3_B8_B39_B40_NUM, (uint16_t *)ru_para_list_4g_b3_b8_b39_b40);
    para_list_struct_assign(&t_ru_para_list[7],  PKG_MAX_NUM, 8,  TM_CH_1, TM_MODE_B40, 		RU_PARA_LIST_4G_B3_B8_B39_B40_NUM, (uint16_t *)ru_para_list_4g_b3_b8_b39_b40);
    para_list_struct_assign(&t_ru_para_list[8],  PKG_MAX_NUM, 9,  TM_CH_2, TM_MODE_B41, 		RU_PARA_LIST_5G_NUM, (uint16_t *)ru_para_list_5g);
    para_list_struct_assign(&t_ru_para_list[9],  PKG_MAX_NUM, 10, TM_CH_3, TM_MODE_B41, 		RU_PARA_LIST_5G_NUM, (uint16_t *)ru_para_list_5g);
#endif
}

/*****************************************************************************
* @Name	  : tm_para_list_check
* @Brief  : 校验获取参数列表相关参数是否正确
* @Param  : pt_src: [输入/出]
**			 pt_para: [输入/出]
* @Retval :
* @Author :
* @Data   : 2023-12-26
* @Note   :
*****************************************************************************/
static uint8_t tm_para_list_valid_check(tm_oid_data_t * pt_src, para_list_t * pt_para)
{
    uint8_t res = TM_CMD_ACT_OK;

    if((TM_CH_0 != pt_src->sys) || (TM_MODE_PUB != pt_src->model) || (0x0009 != pt_src->oid))
        res = TM_CMD_ACT_ID_ERROR;

    uint8_t * pst_dat = &pt_src->dat;

    //uint8_t pkg_num = *pst_dat;
    uint8_t pkg_id  = *(pst_dat + 1);

    if(pkg_id == 0 || pkg_id > pt_para[0].total)
        res = TM_CMD_ACT_ID_ERROR;

    return res;
}


/*****************************************************************************
* @Name	  : tm_para_list_check
* @Brief  :
* @Param  : devId: [输入/出]
**			 pt_src: [输入/出]
* @Retval :
* @Author :
* @Data   : 2023-12-26
* @Note   :
*****************************************************************************/
uint8_t tm_para_list_check(uint8_t devId, tm_oid_data_t * pt_src)
{
    uint8_t res = TM_CMD_ACT_OK;

    if(devId == 0x00)
    {
#if LOCAL_MODULE_TYPE == _MU
        res = tm_para_list_valid_check(pt_src, t_mu_para_list);
#else
        res = tm_para_list_valid_check(pt_src, t_ru_para_list);
#endif
    }

    else if(devId <= 16)
    {}
    else if(devId == 200)
    {}
    else
    {}

    return res;
}


/*****************************************************************************
* @Name	  : vPduParaListPkg
* @Brief  : 上报参数列表数据组包
* @Param  :  src: [输入/出]
**			 list: 参数列表数组地址
**			 listNum: 参数列表长度
* @Retval :  数据包长度
* @Author :
* @Data   : 2022-11-24
* @Note   :
*****************************************************************************/
static int16_t tm_pdu_pkg(tm_oid_data_t * pt_src, para_list_t * pt_para)
{
    uint8_t * pst_dat = &pt_src->dat;

    uint8_t pkg_id  = *(pst_dat + 1) - 1;

    //复制参数列表
    *pst_dat       = pt_para[pkg_id].total;
    *(pst_dat + 1) = pt_para[pkg_id].id;
    *(pst_dat + 2) = pt_para[pkg_id].sys;
    *(pst_dat + 3) = pt_para[pkg_id].mode;
    memcpy((pst_dat + 4), pt_para[pkg_id].dat, 2 * pt_para[pkg_id].len);

    //结束字节
    *(pst_dat + 4 + 2 * pt_para[pkg_id].len + 2) = '!';

    //报文总长度((SOP - ack) + CRC + EOP)
    uint16_t len = 2 + 4 + 4 + 2 * pt_para[pkg_id].len;     //单个监控项的字节长度((len + (oid + model + sys) + total + id + sys + mode + data)
    len += 14;												//整个报文的长度((SOP - ack) + CRC + EOP)

    return len;
}


/*****************************************************************************
* @Name	  : vPduParaListRptPkg
* @Brief  :
* @Param  : devId: [输入/出]
**			src: [输入/出]
**			paraId: [输入/出]
* @Retval :
* @Author :
* @Data   : 2022-11-24
* @Note   :
*****************************************************************************/
int16_t tm_rpt_para_list(uint8_t devId, tm_oid_data_t * pt_src)
{
    uint16_t len = 0;

    if(devId == 0x00)
    {
#if LOCAL_MODULE_TYPE == _MU
        len = tm_pdu_pkg(pt_src, t_mu_para_list);
#else
        len = tm_pdu_pkg(pt_src, t_ru_para_list);
#endif
    }
    else if(devId <= 16)
    {

    }
    else if(devId == 200)
    {

    }
    else
    {}

    return len;

}

